0. Preparation
host0: 192.168.0.199
host1: 192.168.0.200
host2: 192.168.0.201

1. Install openvswitch
http://mirrors.lofyer.org

2. Start ovs services on each host
chkconfig openvswitch on
service openvswitch start

3. Add switch(bridge)
$ ovs-vsctl add-br ovs-br0
$ ifconfig ovs-br0 192.168.1.254 netmask 255.255.255.0 up
    (OPTIONAL)3.1. If you need export ovs-net to other hosts.
    $ ovs-vsctl add-port eth1
    And connect eth1 to the physical switch or host.
    (OPTIONAL)3.2. If you need multihost with ovs, add gre port on each hosts'ovs-br0, remote_ip=another_host_eth0_ip
    host0:
    # ovs-vsctl add-port ovs-br0 gre0 -- set interface gre0 type=gre options:remote_ip=192.168.0.200
    # ovs-vsctl add-port ovs-br0 gre1 -- set interface gre1 type=gre options:remote_ip=192.168.0.201
    On other hosts, add a gre port pointing to host0:
    host1:
    # ovs-vsctl add-port ovs-br0 gre0 -- set interface gre0 type=gre options:remote_ip=192.168.0.199
    host2:
    # ovs-vsctl add-port ovs-br0 gre0 -- set interface gre0 type=gre options:remote_ip=192.168.0.199

4.1. Use ovs-net
# virsh net-create ovs-net.xml 
<network>
  <name>ovs-net</name>
  <forward mode='bridge'/>
  <bridge name='ovs-br0' />
  <virtualport type='openvswitch'/>
</network>

Replace "default" in ext-net.py with "ovs-net" so that we can bridge the VM network to the ovs-br0

5. Run dnsmasq.sh to enable dhcp
#!/bin/bash
/usr/sbin/dnsmasq --strict-order --pid-file=/var/run/libvirt/network/ovs-br0 --conf-file= --except-interface=lo --bind-interfaces --interface=ovs-br0 --listen 192.168.1.1 --dhcp-range 192.168.1.100,192.168.1.253 --dhcp-leasefile=/var/lib/libvirt/dnsmasq/ovs-br0.leases --dhcp-lease-max=253 --dhcp-no-override --dhcp-hostsfile=/var/lib/libvirt/dnsmasq/ovs-br0.hostsfile --addn-hosts=/var/lib/libvirt/dnsmasq/ovs-br0.addnhosts

    (OPTIONAL)5.1. VM access WAN
    On host0:
    # echo 1 > /proc/sys/net/ipv4/ip_forward

    # iptables -t nat -A POSTROUTING -o mgmtnet -j MASQUERADE
    Or
    # iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o ovirtmgmt -j SNAT --to-source 192.168.0.199

6. Start VM

7. Ref:
Add route table:
# route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.254 dev ovs-br0

Linux host :
[root@localhost ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.1.0     0.0.0.0         255.255.255.0   U     0      0        0 ovs-br0
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 bridge0
169.254.0.0     0.0.0.0         255.255.0.0     U     1005   0        0 bridge0
0.0.0.0         192.168.0.1     0.0.0.0         UG    0      0        0 bridge0

[root@localhost ~]# iptables -t nat -L
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination         

Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination         
MASQUERADE  all  --  anywhere             anywhere            

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination

Linux guest route:
[root@livecd ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.1.0     0.0.0.0         255.255.255.0   U     1      0        0 eth0
0.0.0.0         192.168.1.254   0.0.0.0         UG    0      0        0 eth0
